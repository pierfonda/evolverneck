#include "generic_functions.el"

//qantity stretch energy method linear_elastic global
quantity bend energy modulus 1 method star_perp_sq_mean_curvature global

INTEGRAL_ORDER_1D 12
INTEGRAL_ORDER_2D 7

// ***** PARAMETERS *****

PARAMETER  RAD2 = 1
PARAMETER  RIN = .25

PARAMETER  DIST = .14

PARAMETER  RADX = 1
PARAMETER  RADY = 1
PARAMETER  RADZ = 1

PARAMETER  LX1 = RADX
PARAMETER  LY1 = RADY

PARAMETER  LX2 = RAD2

// ***** CONSTRAINTS *****

// Mirror plane constraints

constraint x_mirror
formula: x = 0

constraint y_mirror
formula: y = 0

constraint 1 nonnegative global
formula: x^2/RADX^2 + y^2/RADY^2 + (z-DIST-RADZ)^2/RADZ^2 - 1 = 0

constraint 2 nonnegative global
formula: x^2 + y^2 + (z+DIST+RAD2)^2 - RAD2^2 = 0

// For viewing multiple copies of the fundamental region

view_transform_generators 2
// generator A: reflection in x_mirror
-1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1

// generator B: reflection in y_mirror
1  0 0 0 
0  -1 0 0
0  0 1 0
0  0 0 1

// ***** BOUNDARY *****

vertices   
1 	    LX1	    0	    DIST+2.01*RADZ	constraint 1,2,y_mirror
2 	    0	    LY1	    DIST+2.01*RADZ	constraint 1,2,x_mirror
100 	0	    0	    DIST+2.01*RADZ	constraint 1,2,x_mirror,y_mirror

11 	    LX1	    0	    DIST		constraint 1,2,y_mirror
12 	    0	    LY1	    DIST		constraint 1,2,x_mirror

5	    RIN	    0	    DIST/2		constraint 1,2,y_mirror
6	    0	    RIN	    DIST/2		constraint 1,2,x_mirror

7	    RIN	    0	    -DIST/2		constraint 1,2,y_mirror
8	    0	    RIN	    -DIST/2	        constraint 1,2,x_mirror

19	    LX2	    0	    -DIST		constraint 1,2,y_mirror
110	    0	    LX2	    -DIST		constraint 1,2,x_mirror

9	    LX2	    0	    -DIST-2.01*RAD2	constraint 1,2,y_mirror
10	    0	    LX2	    -DIST-2.01*RAD2	constraint 1,2,x_mirror
200	    0	    0	    -DIST-2.01*RAD2	constraint 1,2,x_mirror,y_mirror

edges:

20 1 100 constraint 1,2,y_mirror
21 2 100 constraint 1,2,x_mirror

1 1 2 constraint 1,2

11 1 11 constraint 1,2,y_mirror
12 2 12 constraint 1,2,x_mirror

2 11 12 constraint 1,2

13 11 5 constraint 1,2,y_mirror
14 12 6 constraint 1,2,x_mirror

3 5 6 constraint 1,2

15 5 7 constraint 1,2,y_mirror
16 6 8 constraint 1,2,x_mirror

4 7 8 constraint 1,2

17 7 19 constraint 1,2,y_mirror
18 8 110 constraint 1,2,x_mirror

5 19 110 constraint 1,2

19 19 9 constraint 1,2,y_mirror
110 110 10 constraint 1,2,x_mirror

6 9 10 constraint 1,2

22 9 200 constraint 1,2,y_mirror
23 10 200 constraint 1,2,x_mirror

faces:

1 20 -21 -1 
2 12 -2 -11 1 
3 14 -3 -13 2 
4 16 -4 -15 3
5 18 -5 -17 4 
6 110 -6 -19 5
7 6 23 -22 

// ***** MAIN *****

read

set_density(0);
transform_expr "a";	
post_project;
set edges color clear where on_constraint x_mirror;
set edges color red where on_constraint y_mirror;
set facets frontcolor lightcyan;
set facets backcolor yellow;

poea := {project_on_ellipse_above(RADX,RADY,RADZ,DIST,.5*DIST)};
poes := {project_on_ellipse_below(RADX,RADY,RADZ,DIST,-.5*DIST)};
poeb := {project_on_ellipse_above(RADX,RADY,RADZ,DIST,1.5*DIST)};

cof := {check_increase off};
ppo := {{w .0001; u; ggm(0,100); K .3; u; ggm(0,100); u;} 5};

dogo := {hessian_seek; r; g 100; uv(2); g 101; r ; g 101; uv(2); w 0.001; g 101; r; g 100; hessian_seek; g 101; uv(2); w 0.0001;}
fogo := {{ g 10; hessian_seek; r; {g 100; uv(2);} 2;  hessian_seek; g 101; {w 0.01; g 100; uv(2);} 2; w 0.01;}}
fogo1 :={g 10; hessian_seek; r; {g 100; uv(2);} 2;  hessian_seek; g 101; {g 100; uv(2);} 2;}
giogo :={fogo 2; fogo1; uv(2);g 100; uv(2); U; g 100; U; t 0.07; g 10; r; U; {g 20; uv(1)} 10; rh(1.5); check_increase; {g 20; uv(1)} 2;}
fuego :={ {{hessian_seek;} 5; r; hessian_seek; {g 10; uv(1);} 10 } 1; w 0.035; {r; g 200; uv(2);} 3}
ndemo :={l 2; {g 10; hessian_seek;} 3;}
namo := {ndemo 3; fogo; fogo1; r; {u;g 10} 20; U; {ggm(0,300); u;} 10; r; n .25; u; ggm(0,40); w 0.0002;  {u; ggm(0,40);} 10}
namo1 := {ndemo 3; fogo; fogo1; r; {u;g 10} 20; U; {ggm(0,300); w 0.0001; u;} 3; { ggm(0,200); uv(1);} 2} 
namo2 := {ndemo 3; fogo; fogo1; n .25; {u;g 10} 20; U; {ggm(0,300); u;} 3; { ggm(0,200); uv(1);} 2} 
namo4 := {ndemo 3; fogo; fogo1; r; ggm(0,100); U; gg(0); }
namo5 := {ndemo 3; u; O; o; ndemo; uv(1); ndemo 2; fogo; O; o; r; ggm(0,300);  }
savevertices:= foreach vertex vv do { printf "%f %f %f %d \n",vv.x,vv.y,vv.z,vv.id } | "cat >> two_spheres.vertices.dat"
savefacets:=  foreach facet ff do { printf "%d %d %d \n",ff.vertex[1].id,ff.vertex[2].id,ff.vertex[3].id } | "cat >> two_spheres.facets.dat"
saveall:= {savevertices; savefacets;}

e; Q;
check_increase;
ASSUME_ORIENTED;
sobolev_mode;
